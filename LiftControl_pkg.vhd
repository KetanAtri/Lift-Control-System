---------------------------------------------------
-- Sheet: Lift Control
-- RefDes: 
-- Part Number: 
-- Generated By: Multisim
--
-- Author: nova
-- Date: Friday, May 06 20:05:39, 2016
---------------------------------------------------

---------------------------------------------------
-- Use: This file contains definitions of components
-- Use with the exported top-level file
---------------------------------------------------
library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;

package LiftControl_pkg is

	component AUTO_IBUF
		port(
		I : in std_logic;
		O : out std_logic
	);
	end component;

	component AUTO_OBUF
		port(
		I : in std_logic;
		O : out std_logic
	);
	end component;

	component DIGITAL_HIGH_NI
		Port ( 
  Y : out  STD_LOGIC:='1'
 );
	end component;

	component DIGITAL_LOW_NI
		Port ( 
  Y : out  STD_LOGIC:='0'
 );
	end component;

	component INV_NI
		port (
    A : in STD_LOGIC := 'X';
    Y : out STD_LOGIC := 'U'
  );
	end component;

	component MUX8_1_NI
		port (
   Y : out STD_LOGIC;
   D0 : in STD_LOGIC;
   D1 : in STD_LOGIC;
   D2 : in STD_LOGIC;
   D3 : in STD_LOGIC;
   D4 : in STD_LOGIC;
   D5 : in STD_LOGIC;
   D6 : in STD_LOGIC;
   D7 : in STD_LOGIC;
    A : in STD_LOGIC;
    B : in STD_LOGIC;
    C : in STD_LOGIC;
    G : in STD_LOGIC
  );
	end component;

	component NOR2_NI
		port (
    B : in STD_LOGIC := 'X';
    A : in STD_LOGIC := 'X';
    Y : out STD_LOGIC := 'U'
  );
	end component;

end LiftControl_pkg;
package body LiftControl_pkg is
end LiftControl_pkg;


library work;
use work.LiftControl_pkg.ALL;
library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity AUTO_IBUF is
	port(
		I : in std_logic;
		O : out std_logic
	);end AUTO_IBUF;

architecture AUTO_IBUF_ARCH of AUTO_IBUF is

begin
 O <= I;
end AUTO_IBUF_ARCH;


library work;
use work.LiftControl_pkg.ALL;
library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity AUTO_OBUF is
	port(
		I : in std_logic;
		O : out std_logic
	);end AUTO_OBUF;

architecture AUTO_OBUF_ARCH of AUTO_OBUF is

begin
 O <= I;
end AUTO_OBUF_ARCH;


library work;
use work.LiftControl_pkg.ALL;
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity DIGITAL_HIGH_NI is
 Port ( 
  Y : out  STD_LOGIC:='1'
 );
end DIGITAL_HIGH_NI;

architecture BEHAVIORAL of DIGITAL_HIGH_NI is
begin
 Y<='1';
end BEHAVIORAL;

library work;
use work.LiftControl_pkg.ALL;
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity DIGITAL_LOW_NI is
 Port ( 
  Y : out  STD_LOGIC:='0'
 );
end DIGITAL_LOW_NI;

architecture BEHAVIORAL of DIGITAL_LOW_NI is
begin
 Y<='0';
end BEHAVIORAL;

library work;
use work.LiftControl_pkg.ALL;
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity INV_NI is
  port (
    A : in STD_LOGIC := 'X';
    Y : out STD_LOGIC := 'U'
  );
end INV_NI;

architecture BEHAVIORAL of INV_NI is  

begin
  Y <= NOT(A);
end BEHAVIORAL;

library work;
use work.LiftControl_pkg.ALL;
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity MUX8_1_NI is
port (
   Y : out STD_LOGIC;
   D0 : in STD_LOGIC;
   D1 : in STD_LOGIC;
   D2 : in STD_LOGIC;
   D3 : in STD_LOGIC;
   D4 : in STD_LOGIC;
   D5 : in STD_LOGIC;
   D6 : in STD_LOGIC;
   D7 : in STD_LOGIC;
    A : in STD_LOGIC;
    B : in STD_LOGIC;
    C : in STD_LOGIC;
    G : in STD_LOGIC
  );
end MUX8_1_NI;

architecture BEHAVIORAL of MUX8_1_NI is  

begin
 process (A, B, C, G, D0, D1, D2, D3, D4, D5, D6, D7)
 begin
       if G='1' then Y<='0';
	elsif (C='0' and B='0' and A='0') then Y<=D0;
	elsif (C='0' and B='0' and A='1') then Y<=D1;
	elsif (C='0' and B='1' and A='0') then Y<=D2;
	elsif (C='0' and B='1' and A='1') then Y<=D3;	
	elsif (C='1' and B='0' and A='0') then Y<=D4;
	elsif (C='1' and B='0' and A='1') then Y<=D5;
	elsif (C='1' and B='1' and A='0') then Y<=D6;
	elsif (C='1' and B='1' and A='1') then Y<=D7;
  end if;
 end process;
end BEHAVIORAL;

library work;
use work.LiftControl_pkg.ALL;
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity NOR2_NI is
  port (
    B : in STD_LOGIC := 'X';
    A : in STD_LOGIC := 'X';
    Y : out STD_LOGIC := 'U'
  );
end NOR2_NI;

architecture BEHAVIORAL of NOR2_NI is  

begin
  Y <= not(A or B);
end BEHAVIORAL;
